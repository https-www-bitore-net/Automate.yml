### Kubermatic
kubermatic:
  docker:
    # the base64 encoded docker authentication token
    secret: ""
  auth:
    # the full path to the openid connect token issuer. For example 'https://dev.kubermatic.io/dex'
    tokenIssuer: ""
    # die client id for openid connect
    clientID: ""
    # skip tls verification on the token issuer
    skipTokenIssuerTLSVerify: "false"
  # base64 encoded datacenters.yaml
  datacenters: ""
  # external domain for the kubermatic installation. For example 'dev.kubermatic.io'
  domain: "kubermatic.example.com"
  # base64 encoded kubeconfig which gives admin access to all seed clusters
  kubeconfig: ""
  # DEPRECATED! the external port for the customer cluster apiservers
  externalApiserverPort: "8443"
  controller:
    # name of the datacenter, the controller is running in. (Coming from the datacenters.yaml)
    datacenterName: "dc1"
    replicas: 2
    image:
      repository: "kubermatic/api"
      # will be overwritten by the installer
      tag: "latest"
      pullPolicy: "IfNotPresent"
  api:
    replicas: 2
    image:
      repository: "kubermatic/api"
      # will be overwritten by the installer
      tag: "latest"
      pullPolicy: "IfNotPresent"
  ui:
    replicas: 2
    image:
      repository: "kubermatic/ui-v2"
      # will be overwritten by the installer
      tag: "latest"
      pullPolicy: "IfNotPresent"

### Storage
storage:
  provider: "openstack-cinder"
  zone: "nova"
  type: "quobyte"

### Nginx definition
nginx:
  hostNetwork: true
  asDaemonSet: true

certificates:
  domains:
  - "kubermatic.example.com"
  - "alertmanager.kubermatic.example.com"
  - "grafana.kubermatic.example.com"
  - "prometheus.kubermatic.example.com"

### Monitoring
prometheus:
  # TODO
  auth: ""
  host: "prometheus.kubermatic.example.com"

grafana:
  # TODO
  user: ""
  password: ""
  host: "grafana.kubermatic.example.com"

alertmanager:
  # TODO
  auth: ""
  host: "alertmanager.kubermatic.example.com"
  config:
    global:
      slack_api_url: https://hooks.slack.com/services/some-slack-webhook
    route:
      receiver: 'default-receiver'
      group_by: ['alertname', 'cluster']
      group_wait: 10s
      group_interval: 5m
      repeat_interval: 1h
    receivers:
    - name: 'default-receiver'
      slack_configs:
      - channel: '#alerting'
        send_resolved: true
        icon_emoji: ':prometheus:'
        title: '{{ template "slack.kubermatic.title" . }}'
        text: '{{ template "slack.kubermatic.text" . }}'
    - name: 'notify'
      slack_configs:
      - channel: '#alerting'
        send_resolved: true
        icon_emoji: ':prometheus:'
        title: '{{ template "slack.kubermatic.title" . }}'
        text: '{{ template "slack.kubermatic.text" . }}'
    templates:
    - '*.tmpl'

dex:
  ingress:
    host: "kubermatic.example.com"
  clients:
  - id: kubermatic
    name: Kubermatic
    secret: openid-connect-secret
    RedirectURIs:
    - https://kubermatic.example.com
    - https://kubermatic.example.com/clusters
  connectors:
  - type: github
    id: github
    name: GitHub
    config:
      clientID: github-client-id
      clientSecret: github-client-secret
      redirectURI: https://kubermatic.example.com/dex/callback
      orgs:
      - name: kubermatic
